{"version":3,"sources":["helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","GifExpertApp.js","index.js"],"names":["getGifs","categorie","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","AddCategory","setCategorie","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GifExpertApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"0NAAaA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARhB,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFEO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECDd,SAAEA,GAAgB,IAAD,EAEjBoB,mBAAS,CACjCb,KAAM,GACNc,SAAS,IAJgC,mBAEpCC,EAFoC,KAE7BC,EAF6B,KAgBzC,OATFC,qBAAU,WACRzB,EAASC,GAAYyB,MAAK,SAAAC,GACxBH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGZ,CAAErB,IAEEsB,EDbuBK,CAAc3B,GAAhC0B,EAF0B,EAEhCnB,KAAYc,EAFoB,EAEpBA,QAEpB,OACE,qCACE,oBAAIL,UAAU,yCAAd,SAAyDhB,IACvDqB,GAAW,mBAAGL,UAAU,wCAAb,wBACb,qBAAKA,UAAU,YAAf,SACKU,EAAKjB,KAAK,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEbbiB,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAEXT,mBAAS,IAFE,mBAExCU,EAFwC,KAE5BC,EAF4B,KAgB/C,OACE,uBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BP,EAAc,CAACC,IACfC,EAAc,MAKhB,UACE,6BAAMD,IACN,uBACEO,KAAK,OACLC,MAAQR,EACRS,SAlByB,SAACN,GAC9BF,EAAcE,EAAEO,OAAOF,cCqBZG,EAzBM,WAAO,IAAD,EAEWrB,mBAAS,CAAC,cAFrB,mBAElBsB,EAFkB,KAENC,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CACEd,aAAgBc,IAElB,uBAEA,6BACID,EAAWjC,KAAK,SAAAT,GAAS,OACvB,cAAC,EAAD,CAEEA,UAAYA,GADNA,Y,MCdpB4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e0605f73.chunk.js","sourcesContent":["export const getGifs = async( categorie ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categorie) }&limit=10&api_key=kf9mG8WLsxVOtcgFfIs0ook80JeB76so`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  });\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n  return (  \n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title }/>\n      <p>{ title }</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ categorie }) => {\n\n  const { data: imgs, loading } = useFetchGifs( categorie );\n\n  return (\n    <>\n      <h3 className=\"card animate__animated animate__fadeIn\">{ categorie }</h3>\n      { loading && <p className=\"card animate__animated animate__flash\">loading...</p> }\n      <div className=\"card-grid\">\n          {imgs.map( img =>\n            (\n              <GifGridItem\n                key={ img.id }\n                { ...img } \n              />\n            )\n          )}\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGif\";\n\nexport const useFetchGifs = ( categorie ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {// Lo usamos para que no llamemos codigo innecesario cuanso se haga un re-render de todo el componente\n    getGifs( categorie ).then(imgs => {\n      setState({\n          data: imgs,\n          loading: false\n        });\n      });\n    }, [ categorie ]); //Es un array de dependencias que dispararan la funcion dentro del useEffect\n  \n    return state;\n \n}","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategorie }) => {\n\n  const [inputValue, setInputValue] = useState('');\n  \n  const handleChangeInputValue = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2) {\n      setCategorie( [inputValue] );\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <h1>{ inputValue }</h1>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleChangeInputValue }\n      />\n    </form>\n  )\n};\n\nAddCategory.propTypes = {\n  setCategorie: PropTypes.func.isRequired,\n};","import React, { useState } from 'react'\nimport { GifGrid } from './components/GifGrid';\nimport { AddCategory } from './components/AddCategory';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One PUnch']);\n\n  return (\n    <>\n      <h2>GifEXpertApp</h2>\n      <AddCategory\n        setCategorie= { setCategories }\n      />\n      <hr/>\n        {/* <button onClick={ handleAdd }>Agregar</button> */}\n      <ol>\n        { categories.map( categorie => (\n            <GifGrid\n              key={ categorie } \n              categorie={ categorie }\n            />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}